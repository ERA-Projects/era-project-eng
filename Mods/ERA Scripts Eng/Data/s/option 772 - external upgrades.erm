ZVSE2
** Author orig.  : Algor
** Rewritten by  : Archer30 and daemon_n
** Name          : External upgrades
** Name rus.     : Внешние улучшения
** Options       : 772


!?OB(OBJ_CREATURE_GENERATOR_1);
!!UN:P772/?(wogOption:y);
!!FU&(wogOption)<>(TRUE):E;

!!DW998:O?(owner:y);
!!FU&(owner)<>i^timerOwner^:E;

!!DW998:M0/?(mon1:y)/?(num1:y) M1/?(mon2:y)/?(num2:y) M2/?(mon3:y)/?(num3:y) M3/?(mon4:y)/?(num4:y);
!!FU(ES_772_ManageMonUpgrades):P(mon1)/(mon2)/(mon3)/(mon4);

!?OB(OBJ_CREATURE_GENERATOR_4);
!!UN:P772/?(wogOption:y);
!!FU&(wogOption)<>(TRUE):E;

!!DW998:O?(owner:y);
!!FU&(owner)<>i^timerOwner^:E;

!!DW998:M0/?(mon1:y)/?(num1:y) M1/?(mon2:y)/?(num2:y) M2/?(mon3:y)/?(num3:y) M3/?(mon4:y)/?(num4:y);
!!FU(ES_772_ManageMonUpgrades):P(mon1)/(mon2)/(mon3)/(mon4);

!?OB(OBJ_REFUGEE_CAMP);
!!UN:P772/?(wogOption:y);
!!FU&(wogOption)<>(TRUE):E;

!!OB998:U?(mon1:y) C?(controlWords:y);  [тип/количество существ в лагере]
!!FU&(controlWords)=0:E;                [выход, если лагерь пуст]

!!FU(ES_772_ManageMonUpgrades):P(mon1)/(NO_MON)/(NO_MON)/(NO_MON);

!?FU(ES_772_ManageMonUpgrades);
!#VA(mon1:x) (mon2:x) (mon3:x) (mon4:x);

; Check if there is any monster from the hero's army can upgrade to one of the monster from the dwelling/Refugee Camp
!!VR(hasUpg:y):S(FALSE);
!!FU(NewIntArray):P?(upgradableMons:y);

; Loop through all the slots of the hero and check if any has an upgrade, store the upgradable monsters (not necessarily to dwelling monsters) in the array
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!HE(CURRENT_HERO):C0/i/?(heroMon:y)/?(num:y);

  !!if&(heroMon)>(NO_MON);
    !!FU(GetUpgradedMonster):P(heroMon)/?(upgMon:y);

    ; Loop through all the monsters of the dwelling/rufugee camp and see if any is the same as the upgraded monster
    !!if&(upgMon)>(NO_MON);
      !!FU(Array_Push):P(upgradableMons)/(heroMon);

      !!re (ptr:y)/1/4;

        !!br&(upgMon)=x(ptr);
      !!en;

      !!VR(hasUpg)&(ptr)<=4:S(TRUE);
    !!en;
  !!en;
!!en;

; Exit the function if no upgrade found
!!FU&(hasUpg)<>(TRUE):E;

; Set up new upgrades (block upgrades not related to the dwelling). Store the original upgrade chain in the array so it can be restored later
!!FU(NewIntArray):P?(origUpgChain:y);

; Loop through all the upgradable monsters and set up new upgrade chain depending on whether they can upgrade to dwelling monsters
!!FU(Array_SortedUnique):P(upgradableMons);
!!SN:M(upgradableMons)/?(size:y);

!!re (index:y)/0/(size)/1/-1;
  !!SN:M(upgradableMons)/(index)/?(mon:y);

  !!FU(ES_722_SetUpNewUpgrades)&(mon)>(NO_MON):P(mon1)/(mon2)/(mon3)/(mon4)/(mon)/(origUpgChain);
!!en;

; Open Hill Forts for human playes or upgrade for free for AI players
!!if&1000;
  ; Manage the costs
  !!VRi^es_772_hillFortStatus^:S1;
  !!UN:C6548300/24/(UNC_INT)/?(patch:y);
  !!FU(ES_772_CalcCostMultiplier):P?(multFloatConverted:y);
  !!UN:C6548300/24/(UNC_INT)/(multFloatConverted);

  ; Open Hill Fort interface
  !!HE(CURRENT_HERO):D;

  ; Restore values
  !!VRi^es_772_hillFortStatus^:S0;
  !!UN:C6548300/24/(UNC_INT)/(patch);
!!el;
  !!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
    !!HE(CURRENT_HERO):C0/i/?(heroMon)/?(num);

    !!if&(heroMon)>(NO_MON);
      !!MA:U(heroMon)/?(upgMon);
      !!HE(CURRENT_HERO)&(upgMon)>(NO_MON):C0/i/(upgMon)/(num);
    !!en;
  !!en;
!!en;

; Restore the original upgrade chain
!!SN:M(origUpgChain)/?(size:y);

!!re (index:y)/0/(size)/1/-1;
  !!SN:M(origUpgChain)/(index)/?(mon:y);
  !!VR(index):+1;
  !!SN:M(origUpgChain)/(index)/?(fortUpgMon:y);
  !!MA:U(mon)/(fortUpgMon);
!!en;

!?FU(ES_722_SetUpNewUpgrades);
!#VA(mon1:x) (mon2:x) (mon3:x) (mon4:x) (mon:x) (origUpgChain:x);

; Loop for a max of 4 times to prevent infinite loop
!!re i/0/3;
  !!FU(GetUpgradedMonster):P(mon)/?(upgMon:y);
  !!br&(upgMon)=(NO_MON);

  ; Loop through all the monsters of the dwelling/rufugee camp and see if any is the same as the upgraded monster
  !!if&(upgMon)>(NO_MON);
    !!MA:U(mon)/?(fortUpgMon:y);
    !!FU(Array_Push):P(origUpgChain)/(mon)/(fortUpgMon);

    !!re (ptr:y)/1/4;

      !!co|(mon)=x(ptr)/x(ptr)=(NO_MON);
      !!br&(upgMon)=x(ptr);
    !!en;

    ; Disable original upgrade if it cannot be found from the external dwelling, or set it again
    !!if&(ptr)>4;
      !!MA:U(mon)/-2;
    !!el;
      !!MA:U(mon)/(upgMon);
      !!VR(mon):S(upgMon);
    !!en;
  !!en;
!!en;

; Gheck the game difficulty and Diplommatic Bargain level (if enabled) to raise or reduce the cost
!?FU(ES_772_CalcCostMultiplier);
!#VA(multFloatConverted:x);

!!UN:J2/?(diff:y);
!!VR(coef:y):S(diff) -1;

!!UN:P786/?(diploBargain:y);

!!if&(diploBargain);
  !!FU(ES_786_GetDiscountLevel):P?(discount:y);
  !!VR(coef):-(discount);
!!en;

!!VR(mult:y):S10 +(coef) *10;
!!VR(percent:e):S(mult) :100;
!!VR(offset:y):S(@percent) -1 *4;
!!UN:C10784536/(offset)/(UNC_INT)/?(multFloatConverted); [10784536 - address for e1]

!?FU(ES_OnGetHillFortCreatureLevel)&i^es_772_hillFortStatus^>0;
!#VA(address:x);

!!UN:C(address)/(STRUCT_HOOK_CONTEXT_EDX)/4/?(monId:y);

!!if&(monId)<>(NO_MON);
  !!MA:L(monId)/?(monLvl:y);
  !!UN&(monLvl)<6:C(address)/(STRUCT_HOOK_CONTEXT_EDX)/(UNC_INT8)/(MON_ANGEL);
!!en;

!!if&i^es_772_hillFortStatus^=1;
  !!UN:C(address)/(STRUCT_HOOK_CONTEXT_EBP)/(UNC_INT)/?(ebp:y) C(ebp)/-12/(UNC_INT)/?(dlgObj:y);
  !!OB998:T?(type:y) U?(subTupe:y);

  !!if&(type)=(OBJ_CREATURE_GENERATOR_1);
    !!FU(GetTextFileString):P^crgen1^/(subTupe)/?(name:z);
  !!el&(type)=(OBJ_CREATURE_GENERATOR_4);
    !!FU(GetTextFileString):P^crgen4^/(subTupe)/?(name);
  !!el&(type)=(OBJ_REFUGEE_CAMP);
    !!FU(GetTextFileString):P^objnames^/(OBJ_REFUGEE_CAMP)/?(name);
  !!en;

  !!FU(H3Dlg_SendCmdToItem):P(dlgObj)/202/(DLG_CMD_SET_TEXT)/(name)/(DLG_CMD_TYPE_DEFAULT);
  !!VRi^es_772_hillFortStatus^:S2;
!!en;

** end
