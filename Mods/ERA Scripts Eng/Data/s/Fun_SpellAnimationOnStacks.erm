ZVSE

** ver 1.0

!?FU(Fun_SpellAnimationOnStacks);       // проигрывание анимации на нескольких отрядах одновременно
; Параметры x1,x2 определяют режим работы функции:
; x1=-1 - инициализация временного массива и возврат в x2 номера массива (отрицательное число <=-2)
; x1<=-2 - проигрывание анимации x2 (0..86, смотри BM:V) на отрядах добавленных в массив x1 
; x1=0..41 - добавление отряда x1 в массив x2
; Параметры x3,x4 используются только при проигрывании анимации (x1<=-2):
; x3=0 - при проигрывании анимации отряды не двигаются
; x3=1 - при проигрывании анимации отряды двигаются как при получении урона
; x4=0 - после анимации не освобождать массив (можно проигрывать несколько анимаций на отрядах из массива)
; x4=1 - после анимации освободить массив
; Пример: все Боевые Гномы (17) на поле получают анимацию Щит (27)
; !FU(Fun_SpellAnimationOnStacks):P-1/?y1; // создаем новый массив отрядов для анимации, y1 - номер созданного массива
; !re i/0/41:; // для каждого отряда на поле
;   !BMi:T?y2; // получение в y2 типа существ в отряде
;   !FU(Fun_SpellAnimationOnStacks)&y2=17:Pi/y1; // добавление отряда в массив, если в нем Боевые Гномы (17)
; !en:;
; !FU(Fun_SpellAnimationOnStacks):Py1/27/0/1; // анимация Щит (27) на добавленных отрядах, отряды не изображают получение урона (0), массив удаляется после анимации (1)
!!if&x1=-1:;                            // init array
  !!SN:M-1/20/0/0; !!VRx2:Sv1;          // init array, return x2 as slot number 
!!en:;
!!if&x1<=-2/x2>=0/x2<=86:;              // play animation
  !!VRx3&x3<>0:S1;                      // x3=0..1
  !!UN:C6919200/4/?y1;                  // y1 - combatmanager
  !!SN:Mx1/?y2/0;                       // y2 - array adress
  !!SN:E5925584/2/y1/y2/x2/x3;          // play animation on stacks
  !!SN&x4<>0:Mx1;                       // clear slot
!!en:;
!!if&x1>=0/x1<=41/x2<=-2:;              // add stack
  !!VRx1&x1>20:-1;                      // shift for defenders stacks
  !!VRy1:Sx1 :4;                        // y1 - slot number
  !!VRy2:Sx1 %4;                        // y2 - add value
  !!VRy2&y2=3:S16777216;                // ...
  !!VRy2&y2=2:S65536;                   // ...
  !!VRy2&y2=1:S256;                     // ...
  !!VRy2&y2=0:S1;                       // ...
  !!SN:Mx2/y1/?y3;                      // y3 - current value
  !!VRy3:|y2;                           // add stack value
  !!SN:Mx2/y1/y3;                       // store value
!!en:;

** end