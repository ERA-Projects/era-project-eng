ZVSE2
**
**    Written by Matteo "Ameranth" T. 2022.
**
**    Improves the strength of AI by guiding the AI toward heroes with "good" specializations.
**
**    On day 1, Replace AI heroes to use heroes who have more useful specializations.
**    Do not use heroes already on the map or in a tavern.
**    Block AI from hiring heroes who have "bad" specializations.
**  --------------------------



!?FU(OnEveryDay)&i^timerIsAi^=(TRUE);
    !!FU&i^huAI_replaceHeroes^=(FALSE):E;       //Exit if hero replacement is not enabled.
    !!VR(day:y):Sc;     //Get day.
    !!FU&(day)<>1:E;    //Only do this on day 1.
    !!FU(huAI_replaceBadHeroes):P;



**  --------------------------
!?FU(huAI_replaceBadHeroes);
**    Replace "bad" heroes owned by AI with "good" ones.
    !!re i/(HERO_FIRST)/(HERO_LAST_WOG):;
    
        !!HEi:O?(owner:y);                                  //get hero's owner
        !!if&(owner)>(NO_PLAYER):;                          //hero is owned
            !!OW:I(owner)/?(isAI:y);                        //get if owner is AI
            !!if&(isAI)=(TRUE):;                            //continue if AI
                !!FU(huAI_GetSpecMult):Pi/?(specWorth:y);   //get if hero should be replaced. Cannot directly get into e-var, attempting this gives zero.
                !!VR(specMult:e)S:(specWorth):100;          //Convert to intended float.
                !!FU&(specMult)>=1:E;                       //exit if hero should be kept.
                
                !!HEi:B2/?(heroClass:y);
                !!VR(heroTown:y):S(heroClass):2;
                !!VR(heroesOfTownFirst:y):S(heroTown)*16;               //get first index of heroes within this hero's town. There are 16 standard heroes for each town, these operations gives us the first of those.
                !!VR(heroesOfTownLast:y):S(heroesOfTownFirst)+15;       //get *last* index of heroes within this hero's town.
                !!FU(huAI_GetReplacementHero):P?(replacementHero:y)/(heroesOfTownFirst)/(heroesOfTownLast);         //Get a replacement hero within this town.
                !!FU&(replacementHero)=-1:E;                //exit if no valid replacement could be found.
                
                !!HEi:P?(x:y)/?(y:y)/?(z:y);                //get xyl of current "bad" hero.
                !!HEi:K;                                    //Remove current hero, else crash when disabling owned hero.
                //!FU(huAI_BlockHero):Pi;                   //EDIT: Not doing this anymore since new logic should allow AI to play around getting "bad" heroes.
                !!HE(replacementHero):P(x)/(y)/(z)/0;       //Add new hero.
                !!HE(replacementHero):O(owner);             //Set new hero's owner to old hero's owner.
                
            !!en:;
        !!el:;        //Hero is not owned
            //EDIT: Not doing this anymore because I am unsure if it causes issues, and new AI logic should allow them to correctly play around getting these "bad" heroes as a player would.
            //!FU(huAI_GetSpecMult):Pi/?(specMult:e);       //get if hero should be replaced.
            //!FU(huAI_BlockHero)&(specMult)>=1:Pi;         //Disable hero for all AI players if it was "bad".
        !!en:;
        
    !!en:;
**  --------------------------



**  --------------------------
!?FU(huAI_GetReplacementHero);
**  Returns number of an unused "good" hero, which matches the passed town.
**  if only return param is provided, default hero range of 0-143 (155 if extension heroes allowed) is searched.
    !#VA(returnHero:x);
    !#VA(heroRangeFirst:x);
    !#VA(heroRangeLast:x);
    
    !!VR(returnHero):S-1;
    !!FU:A?(numArgs:y);
    
    !!VR(heroRangeFirst)&(numArgs)=1:S(HERO_FIRST);         //Default to 0 start range if none is provided.
    !!if&(numArgs)<3:;                                      //Default to 143 (155 if extension heroes allowed) end range if none is provided.
        !!UN:P100/?(extensionEnabled:y);                    //Check if extension heroes are enabled.
        !!if&(extensionEnabled)=(TRUE):;
            !!VR(heroRangeLast):S(HERO_LAST_WOG);           //155 if extension heroes allowed.
        !!el:;
            !!VR(heroRangeLast):S(HERO_GRINDAN);            //143 if extension heroes not allowed.
        !!en:;
    !!en:;
    
    !!re i/(heroRangeFirst)/(heroRangeLast):;
        !!FU(huAI_GetSpecMult):Pi/?(specMult:e);    //get "worth" of hero spec.
        !!if&(specMult)>=1.0:;                      //continue if the target hero is good.
            !!VR(x:y):S-1;
            !!HEi:P?(x)/?(y:y)/?(z:y);              //Get target hero x coord. Using this with any params as 'd' can cause a crash!
            !!HEi:O?(owner:y);                      //get target hero's owner
            !!co|(x)>-1/(owner)>(NO_HERO):;         //Don't use this hero if it is on the map already or is already owned.
            
            !!FU(huAI_HeroInTavern):Pi/?(isInTavern:y);
            !!co&(isInTavern)=(TRUE):;              //Don't use this hero if it is in a tavern already.
            
            !!VR(returnHero):Si;                    //Return value is set.
            !!br:;                                  //Break since we found a valid hero.
        !!en:;
    !!en:;
**  --------------------------



**  --------------------------
!?FU(huAI_BlockHero);
**    Disables the hero x1 for all AI players.
    !#VA(hero:x);
    
    !!re i/(PLAYER_FIRST)/(PLAYER_LAST):;
        !!OW:Ii/?(isAI:y)/?(isDead:y);                      //get if target player is AI and alive.
        !!HE(hero)&(isAI)=(TRUE)/(isDead)=(FALSE):R3/0/i;   //disable hero for the player. Not for owning player.
    !!en:;
**  --------------------------



**  --------------------------
!?FU(huAI_HeroInTavern);
**    Checks if hero(x1) is in tavern for player range iterated.
**    Returns x2=1 if yes, 0 if no.
    !#VA(hero:x);
    !#VA(returnBool:x);
    
    !!VR(returnBool):S(FALSE);
    
    !!re i/(PLAYER_FIRST)/(PLAYER_LAST):;
        !!OW:Ii/d/?(isDead:y);                              //get if target player is alive.
        !!if&(isDead)=(FALSE):;
            !!OW:Vi/?(leftHero:y)/?(rightHero:y);           //get left and right hero of tavern.
            !!if|(leftHero)=(hero)/(rightHero)=(hero):;     //if hero is in tavern, return 1 and exit loop.
                !!VR(returnBool):S(TRUE);
                !!FU:E;                                     //exit since a return value was found.
            !!en:;
        !!en:;
    !!en:;
**  --------------------------
    


**  --------------------------
!?FU(huAI_GetSpecMult);
**    Returns a multiplier "float" (numerator to be divided by 100) for the "worth" of a hero. Better specs have higher multipliers, worse specs have lower ones.
**    x1=hero
**    x2=return value.
    !#VA(hero:x);
    !#VA(returnValue:x);
    
    !!VR(returnValue):S100;                             //Default return 1. This is a "good" spec.
    
    !!HE(hero):X?(specType:y)/?(spec:y)/d/d/d/d/d;      //Get hero specialization.
    !!UN:P726/?(remagicEnabled:y);                      //Check if ReMagic script is enabled.
    **    -----
    **    Master of secondary skill
    !!if&(specType)=0:;
        !!if|(spec)=(SKILL_NAVIGATION)/(spec)=(SKILL_MYSTICISM)/(spec)=(SKILL_EAGLE_EYE)/(spec)=(SKILL_ESTATES)/(spec)=(SKILL_ARTILLERY)/(spec)=(SKILL_INTELLIGENCE):;
            !!VR(returnValue):S30;              //These skills don't benefit a main hero very well, or the AI does not play well to the strength of these.
        !!el|(spec)=(SKILL_LOGISTICS)/(spec)=(SKILL_ARMORER)/(spec)=(SKILL_OFFENCE)/(spec)=(SKILL_RESISTANCE)/(spec)=(SKILL_NECROMANCY):;
            !!VR(returnValue):S120;             //These skills are exceptional because they offer a powerful and generic benefit.
        !!en:;
        !!FU:E;
    !!en:;
    **    -----
    **    Master of creatures
    !!if&(specType)=1:;
        !!if|(spec)=(MON_BALLISTA)/(spec)=(MON_TROGLODYTE)/(spec)=(MON_IMP)/(spec)=(MON_GNOLL)/(spec)=(MON_DWARF)/(spec)=(MON_WALKING_DEAD)/(spec)=(MON_GOBLIN):;    //Don't keep master of Ballista, Troglodytes, Imps, Gnolls, Dwarves, Walking Dead, or Goblins.
            !!VR(returnValue):S35;              //These units just aren't good enough at base for the AI stack them well, and they're not very strong even with mastery.
        !!el|(spec)=(MON_DEMON)/(spec)=(MON_SKELETON):;
            !!VR(returnValue):S120;             //These units are extremely good to specialize in because they can represent a majority in a hero's army.
        !!en:;
        !!FU:E;
    !!en:;
    **    -----
    **    Master of resources
    !!if&(specType)=2:;
        !!VR(returnValue):S25;                  //These are not suitable for a main hero.
        !!FU:E;
    !!en:;
    **    -----
    **    Master of spells
    !!if&(specType)=3:;
        !!if&(spec)<>(SPELL_CHAIN_LIGHTNING)/(spec)<>(SPELL_HASTE)/(spec)<>(SPELL_METEOR_SHOWER)/(spec)<>(SPELL_STONE_SKIN);
            !!VR(returnValue):S65;              //These are usable spells.
        !!el:;
            !!VR(returnValue):S35;              //Other spells are not good.
        !!en:;
        !!if&(remagicEnabled)=(TRUE):;          //Allow additional spells if ReMagic is enabled.
            !!if|(spec)<>(SPELL_HYPNOTIZE)/(spec)=(SPELL_DEATH_RIPPLE)/(spec)=(SPELL_INFERNO)/(spec)<>(SPELL_BLESS)/(spec)<>(SPELL_PRAYER):;
                !!VR(returnValue):S65;
            !!en:;
        !!en:;
        !!FU:E;
    !!en:;
    **    -----
    **    Grandmaster of creatures
    !!if&(specType)=4:;
        !!if|(spec)=(MON_BALLISTA)/(spec)=(MON_TROGLODYTE)/(spec)=(MON_IMP)/(spec)=(MON_GNOLL)/(spec)=(MON_DWARF)/(spec)=(MON_WALKING_DEAD)/(spec)=(MON_GOBLIN):;    //Don't keep master of Troglodytes, Imps, Gnolls, Dwarves, Walking Dead, or Goblins.
            !!VR(returnValue):S65;              //These units just aren't good enough at base for the AI to stack them well, and they're not very strong even with mastery.
        !!el|(spec)=(MON_DEMON)/(spec)=(MON_SKELETON):;
            !!VR(returnValue):S150;             //These units are extremely good to specialize in because they can represent a majority in a hero's army.
        !!el&i^wog_39_MonSpecEnabled^=(TRUE):;
            !!VR(returnValue):S115;             //Creature spec boost wog-style creature master, which is incredibly strong.
        !!en:;
        !!FU:E;
    !!en:;
    **    -----
    **    Master of speed
    !!if&(specType)=5/(spec)=2:;
        !!VR(returnValue):S150;                 //+2 speed is crazy good.
        !!FU:E;
    !!en:;
    **    -----
    **    Master of WoG specialty - Walking Shroud/Builder.
    !!if&(specType)=8/(spec)=1:;
        !!VR(returnValue):S35;                  //Shroud is not really helpful - Builder is actually good, if it ever exists.
        !!FU:E;
    !!en:;
**  --------------------------



